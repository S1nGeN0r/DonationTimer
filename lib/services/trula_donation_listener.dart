import 'dart:async';
import 'dart:ui';
import 'package:webview_windows/webview_windows.dart';
import 'package:flutter/foundation.dart';

/// –ú–æ–¥–µ–ª—å –¥–æ–Ω–∞—Ç–∞ Trula
class TrulaDonation {
  final String username;
  final int amount;

  TrulaDonation(this.username, this.amount);
}

/// –õ–∏—Å—Ç–µ–Ω–µ—Ä –¥–ª—è Trula Music —á–µ—Ä–µ–∑ WebView
class TrulaDonationListener {
  final String token;
  final void Function(String username, int amount) onDonation;

  final _controller = WebviewController();
  String lastFirstLine = '';
  Timer? _timer;

  final Map<String, DateTime> _recentDonations = {}; // –ó–∞—â–∏—Ç–∞ –æ—Ç –¥—É–±–ª–µ–π

  TrulaDonationListener({
    required this.token,
    required this.onDonation,
  });

  /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WebView –∏ –∑–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  Future<void> _initWebView() async {
    await _controller.initialize();
    _controller.setBackgroundColor(const Color(0x00ffffff));

    await _controller
        .loadUrl('https://trula-music.ru/obs/notification/?token=$token');

    debugPrint('üåê WebView –∑–∞–≥—Ä—É–∂–µ–Ω Trula-–≤–∏–¥–∂–µ—Ç');

    await Future.delayed(const Duration(seconds: 3));
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ–Ω–∞—Ç–∞ –∏–∑ JS —á–µ—Ä–µ–∑ WebView
  Future<TrulaDonation?> fetchLatestDonation() async {
    try {
      const script = '''
        (function() {
          const el = document.querySelector('.notification__text');
          return el ? el.innerText.trim() : '';
        })()
      ''';

      final result = await _controller.executeScript(script);

      if (result == null || result.trim().isEmpty) {
        debugPrint('‚ÑπÔ∏è JS –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É');
        return null;
      }

      final text = result.trim();
      debugPrint('üîç Trula JS innerText: "$text"');

      final firstLine = text.split('\n').first.trim();
      debugPrint('üîî Trula firstLine: "$firstLine"');

      if (firstLine.isEmpty || firstLine == lastFirstLine) {
        debugPrint('‚ÑπÔ∏è –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∏–ª–∏ –ø—É—Å—Ç–æ–π –¥–æ–Ω–∞—Ç');
        return null;
      }

      final regex = RegExp(r'(\d+)\s+—Ä—É–±\s+–æ—Ç\s+(.+)', caseSensitive: false);
      final match = regex.firstMatch(firstLine);

      if (match != null && match.groupCount >= 2) {
        final amount = int.tryParse(match.group(1)!) ?? 0;
        final usernameOriginal = match.group(2)!.trim();
        final username = '$usernameOriginal (trula)';

        final key = '$username|$amount';
        final now = DateTime.now();

        if (_recentDonations.containsKey(key)) {
          final lastTime = _recentDonations[key]!;
          final difference = now.difference(lastTime).inSeconds;
          if (difference < 5) {
            debugPrint(
                '‚è±Ô∏è –î–æ–Ω–∞—Ç –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è –º–µ–Ω–µ–µ —á–µ–º —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥ ($difference —Å–µ–∫). –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.');
            return null;
          }
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è
        _recentDonations[key] = now;

        debugPrint('‚úÖ Trula: $username –æ—Ç–ø—Ä–∞–≤–∏–ª $amount —Ä—É–±');
        lastFirstLine = firstLine;

        return TrulaDonation(username, amount);
      } else {
        debugPrint('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å: "$firstLine"');
      }
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ Trula –¥–æ–Ω–∞—Ç–∞ —á–µ—Ä–µ–∑ JS: $e');
    }
    return null;
  }

  /// –ó–∞–ø—É—Å–∫ WebView –∏ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è –¥–æ–Ω–∞—Ç–æ–≤
  void startListening() async {
    debugPrint('‚ñ∂Ô∏è Trula: –ó–∞–ø—É—Å–∫ WebView –∏ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è –¥–æ–Ω–∞—Ç–æ–≤');
    await _initWebView();

    _timer = Timer.periodic(const Duration(seconds: 1), (_) async {
      final donation = await fetchLatestDonation();
      if (donation != null) {
        onDonation(donation.username, donation.amount);
      }
    });
  }

  /// –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è
  void dispose() {
    _timer?.cancel();
    _controller.dispose();
  }
}
